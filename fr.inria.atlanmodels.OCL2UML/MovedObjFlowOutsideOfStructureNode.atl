-- @atlcompiler atl2010
-- @nsURI UML=http://www.eclipse.org/uml2/4.0.0/UML
-- @nsURI ATL=http://www.eclipse.org/gmt/2005/OCL
-- @nsURI ALF=http://www.eclipse.org/gmt/4.0.0/UML


module MovedObjFlowOutsideOfStructureNode;
create OUT: UML refining IN: UML;

helper context OclAny def: getInStructureNode : OclAny =
	if (self.oclIsTypeOf(UML!OutputPin) or self.oclIsTypeOf(UML!InputPin)) then
		self.refImmediateComposite().inStructuredNode
	else
		self.inStructuredNode
	endif;

rule addOuTputPinToStructureNodeForIfExp {
	from
		s: UML!ObjectFlow (
			s.source.getInStructureNode <> s.target.getInStructureNode 
			and 
			s.target.getInStructureNode.oclIsTypeOf(UML!StructuredActivityNode) 
			and 
			s.getInStructureNode=s.target.getInStructureNode
		)
	to
		_: UML!ObjectFlow (
			activity <- s.target.getInStructureNode.activity,
			inStructuredNode <- s.target.getInStructureNode.inStructuredNode
		)
}

rule AddPinForObjectFlowGoingIntoExpansionRegionBoundary {
	from
		s : UML!ObjectFlow (
			s.source.getInStructureNode <> s.target.getInStructureNode and
			s.target.getInStructureNode.oclIsKindOf(UML!ExpansionRegion) and
			not (s.source.oclIsKindOf(UML!ExpansionNode) or s.target.oclIsKindOf(UML!ExpansionNode))
		)
	to
		t : UML!ObjectFlow (
			name <- 'OLD',
			activity <- s.target.getInStructureNode.activity,
			inStructuredNode <- s.target.getInStructureNode.inStructuredNode,
			target <- p
		),
			p : UML!InputPin -> (s.target.getInStructureNode.structuredNodeInput),
			of : UML!ObjectFlow (
				name <- 'NEW',
				source <- p,
				target <- s.target,
				activity <- s.target.getInStructureNode.activity,
				inStructuredNode <- s.target.getInStructureNode
			)
}

